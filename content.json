{"meta":{"title":"huklee's blog","subtitle":null,"description":null,"author":"huklee","url":"https://huklee.github.io"},"pages":[],"posts":[{"title":"Effective C++ Summary - Chap 01.","slug":"Effective-C-Chap-01","date":"2016-12-31T15:09:38.000Z","updated":"2016-12-31T15:19:36.000Z","comments":true,"path":"2017/01/01/Effective-C-Chap-01/","link":"","permalink":"https://huklee.github.io/2017/01/01/Effective-C-Chap-01/","excerpt":"","text":"Chap 1. C++에 왔으면 C++의 법을 따릅시다.항목 1. C++를 언어들의 연합체(federation) 로 바라보는 안목은 필수C++는 한 가지 프로그래밍 규칙 아래 구성된 통합언어(unified language)가 아니라 네 가지 하위 언어들의 연합체(federation) 라고 보는 것이 언어를 이해하기에 좋다. C 블록, 문장, 선행 처리자, 기본제공 데이터타입, 배열, 포인터 etc… OOP로써의 C++ 클래스를 사용하는 C : 클래스 , 캡슐화, 상속, 다형성, 가상 함수 etc 템플릿 C++ Template Meta-programming : TMP STL 템플릿 라이브러리 : container / iterator / algorithm / function object 항목 2. #define을 쓰려거든const, enum, inline을 떠올리자.매크로인 #define를 수식이나 상수에 사용하는 것은 떄때로 예측할 수 없는 결과를 가져올 수 있으며 , 디버깅에 있어서 비효율적이다. 일례로 아래와 같은 컴파일 에러를 생각해 보자. 123// Bad Example#define ASPECT_RATIO 1.563int ratio = ASPECT_RATIO / 0; 컴파일러로 코드가 넘어간 후에는ASPECT_RATIO가 symbolic name으로 남지 않고,숫자 상수로 대체되어 버린다. 때문에 컴파일러의 기호 테이블에 들어가 있기 때문에 컴파일 에러라도 나면, 복잡한 코드에서는 이를 바로잡기가 쉽지 않다. 특히나 매크로 함수는 큰 재앙이 될 수도 있다. 12345// Bad Example#define CALL_WITH_MAX(a,b) f((a) &gt; (b) ? (a) : (b))int a=5, b=0;CALL_WITH_MAX(++a, b);CALL_WITH_MAX(++a, b + 10); 위와 함수의 경우 a는 7이 되고, 아래의 경우는 6이 되어버린다. 의도되지 않은 결과가 나와버린다. 상수를 선언하는 올바른 코드는 아래와 같다. 12// Good Exampleconst double AspectRatio = 1.653; 클래스 안에서 상수를 사용하고 싶을 때는 static const 혹은 enum을 사용하자. 123456// Good Exampleclass ConstEstimate&#123;private: static const double FudgeFactor = 1.35; enum &#123; NumTurns = 5&#125;;&#125; 매크로 함수의 경우, template function을 사용하면 매크로의 효율적인 코드의 측면을 가져갈 수 있다.123456// Good Exampletemplate&lt;typename T&gt;inline void callWithMax (const T&amp; a, const T&amp; b)&#123; f(a &gt; b ? a : b);&#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://huklee.github.io/tags/C/"},{"name":"EC++","slug":"EC","permalink":"https://huklee.github.io/tags/EC/"}]},{"title":"image test","slug":"test","date":"2016-11-25T08:48:03.000Z","updated":"2016-12-31T14:33:06.000Z","comments":true,"path":"2016/11/25/test/","link":"","permalink":"https://huklee.github.io/2016/11/25/test/","excerpt":"","text":"","categories":[{"name":"Image","slug":"Image","permalink":"https://huklee.github.io/categories/Image/"}],"tags":[{"name":"image","slug":"image","permalink":"https://huklee.github.io/tags/image/"},{"name":"test","slug":"test","permalink":"https://huklee.github.io/tags/test/"},{"name":"layout","slug":"layout","permalink":"https://huklee.github.io/tags/layout/"}]},{"title":"Timezone Test","slug":"Timezone-Test","date":"2016-11-25T08:20:26.000Z","updated":"2016-11-25T10:23:03.000Z","comments":true,"path":"2016/11/25/Timezone-Test/","link":"","permalink":"https://huklee.github.io/2016/11/25/Timezone-Test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Swift Tutorial","slug":"Swift-Tutorial","date":"2016-11-25T08:12:10.000Z","updated":"2016-11-25T10:23:03.000Z","comments":true,"path":"2016/11/25/Swift-Tutorial/","link":"","permalink":"https://huklee.github.io/2016/11/25/Swift-Tutorial/","excerpt":"","text":"Swift TutorialSwift Tutorial pageSwift Playground","categories":[],"tags":[{"name":"Swift, Cocoa, AppCode","slug":"Swift-Cocoa-AppCode","permalink":"https://huklee.github.io/tags/Swift-Cocoa-AppCode/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-11-20T15:10:23.000Z","updated":"2016-11-25T15:29:39.000Z","comments":true,"path":"2016/11/21/hello-world/","link":"","permalink":"https://huklee.github.io/2016/11/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 1[rectangle setX: 10 y: 10 width: 20 height: 20]; #include using namespace std;int main(){ cout &lt;&lt; “Hello world, C++ “ &lt;&lt; endl;}","categories":[],"tags":[]}]}